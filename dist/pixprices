#!/usr/bin/env node
'use strict';

var sade = require('sade');
var cheerio = require('cheerio');
var httpie = require('httpie');
var Debug = require('debug');
var ms = require('ms');
var Database = require('jsdbd');
var promises = require('fs/promises');
var s3js = require('s3js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var sade__default = /*#__PURE__*/_interopDefaultLegacy(sade);
var cheerio__default = /*#__PURE__*/_interopDefaultLegacy(cheerio);
var Debug__default = /*#__PURE__*/_interopDefaultLegacy(Debug);
var ms__default = /*#__PURE__*/_interopDefaultLegacy(ms);
var Database__default = /*#__PURE__*/_interopDefaultLegacy(Database);

var version = "0.4.0";

function delay (ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

const debug$2 = Debug__default['default']('pixprices:db');
async function writePrices (items, opts) {
  const db = await getDB(opts);
  await Promise.all(
    items.map(async item => {
      const prev = await db.findOne('code', item.code);
      if (prev) {
        await db.update({ ...prev, ...item });
      } else {
        await db.insert(item);
      }
    })
  );
  debug$2('wrote %d records', items.length);
}
async function purgeOldPrices (timeSpec, opts) {
  const db = await getDB(opts);
  const cutoff = Date.now() - ms__default['default'](timeSpec + '');
  const recs = await db.getAll();
  const old = recs.filter(({ time }) => time < cutoff);
  if (old.length) {
    await db.delete(old);
    await db.compact();
    debug$2('%d records were older than %s', old.length, timeSpec);
  }
}
async function getAll (opts) {
  const db = await getDB(opts);
  return db.getAll()
}
async function getDB ({ database: dbFile }) {
  const db = new Database__default['default'](dbFile);
  await db.ensureIndex({ fieldName: 'code', unique: true });
  return db
}

const debug$1 = Debug__default['default']('pixprices:fetch-lse');
const USER_AGENT =
  'Mozilla/5.0 (X11; CrOS x86_64 13729.56.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.95 Safari/537.36';
async function fetchIndex (indexName, opts) {
  debug$1('index %s', indexName);
  const url = `https://www.lse.co.uk/share-prices/indices/${indexName}/constituents.html`;
  return fetchCollection(
    url,
    'sp-constituents__table',
    `lse:index:${indexName}`,
    opts
  )
}
async function fetchSector (sectorName, opts) {
  debug$1('sector %s', sectorName);
  const url = `https://www.lse.co.uk/share-prices/sectors/${sectorName}/constituents.html`;
  return fetchCollection(
    url,
    'sp-sectors__table',
    `lse:sector:${sectorName}`,
    opts
  )
}
async function fetchCollection (url, collClass, source, opts) {
  await delay(1000);
  const now = new Date();
  const fetchOpts = {
    headers: {
      'User-Agent': USER_AGENT
    }
  };
  const { data: html } = await httpie.get(url, fetchOpts);
  const $ = cheerio__default['default'].load(html);
  const items = [];
  $(`table.${collClass} tr`)
    .has('td')
    .each((i, tr) => {
      const values = [];
      $('td', tr).each((j, td) => {
        values.push($(td).text());
      });
      const { name, ticker } = extractNameAndTicker(values[0]);
      const price = extractNumber(values[1]);
      items.push({
        code: ticker,
        name,
        price,
        time: now,
        source
      });
    });
  debug$1('Read %d items', items.length);
  await writePrices(items, opts);
}
async function fetchPrice (code, opts) {
  debug$1('share %s', code);
  await delay(1000);
  const url = `https://www.lse.co.uk/SharePrice.asp?shareprice=${code}`;
  const now = new Date();
  const fetchOpts = {
    headers: {
      'User-Agent': USER_AGENT
    }
  };
  const { data: html } = await httpie.get(url, fetchOpts);
  const $ = cheerio__default['default'].load(html);
  const item = {
    code,
    time: now,
    source: 'lse:share'
  };
  item.name = $('h1.title__title')
    .text()
    .replace(/ Share Price.*/, '');
  item.price = extractNumber(
    $('span[data-field="BID"]')
      .first()
      .text()
  );
  await writePrices([item], opts);
}
function extractNameAndTicker (text) {
  const re = /(.*)\s+\(([A-Z0-9.]{2,4})\)$/;
  const m = re.exec(text);
  if (!m) return {}
  const [, name, ticker] = m;
  return { name, ticker }
}
function extractNumber (text) {
  return parseFloat(text.replace(/,/g, ''))
}

const debug = Debug__default['default']('pixprices:publish');
async function publishPrices (opts) {
  const { tempfile, s3file } = opts;
  const items = await getAll(opts);
  const data = items.reduce((data, rec) => {
    const { _id, code, time, ...rest } = rec;
    data[code] = { code, ...rest, time: +time };
    return data
  }, {});
  await promises.writeFile(tempfile, JSON.stringify(data), 'utf8');
  await s3js.upload(tempfile, s3file);
  await promises.unlink(tempfile);
  debug('%d prices uploaded to %s', items.length, s3file);
}

const prog = sade__default['default']('pixprices');
prog.version(version).option('--database', 'database name', 'prices.db');
prog.command('fetch lse index <index>', 'fetch index prices').action(fetchIndex);
prog
  .command('fetch lse sector <sector>', 'fetch sector prices')
  .action(fetchSector);
prog.command('fetch lse price <code>', 'fetch stock price').action(fetchPrice);
prog
  .command('purge prices after <time>', 'purge old prices')
  .action(purgeOldPrices);
prog
  .command('publish', 'publish prices to S3')
  .option('--tempfile', 'transfer temp file', '/tmp/prices.json')
  .option(
    '--s3file',
    'publish destination',
    's3://finance-readersludlow/public/prices'
  )
  .action(publishPrices);
const parsed = prog.parse(process.argv, { lazy: true });
if (parsed) {
  const { handler, args } = parsed;
  handler(...args).catch(err => {
    console.error(err);
    process.exit(1);
  });
}
